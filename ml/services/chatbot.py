"""
Chatbot Service
Tr·ª£ l√Ω AI ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ giao d·ªãch v√† ph√¢n t√≠ch
"""

import re
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from ml.models.schemas import (
    TransactionRecord, FeatureEngineering, AnomalyDetection,
    ChatbotRequest, ChatbotResponse
)

class ChatbotService:
    """AI Assistant cho ph√¢n t√≠ch giao d·ªãch v√† tr·∫£ l·ªùi c√¢u h·ªèi"""
    
    def __init__(self):
        self.context_cache = {}  # Cache ƒë·ªÉ l∆∞u context conversations
        
        # Predefined intents and patterns
        self.intents = {
            "balance_inquiry": [
                r"s·ªë d∆∞", r"balance", r"bao nhi√™u ti·ªÅn", r"c√≥ bao nhi√™u"
            ],
            "transaction_count": [
                r"bao nhi√™u giao d·ªãch", r"s·ªë l∆∞·ª£ng giao d·ªãch", r"transaction count"
            ],
            "spending_analysis": [
                r"chi ti√™u", r"spending", r"ti√™u bao nhi√™u", r"ƒë√£ g·ª≠i"
            ],
            "anomaly_check": [
                r"b·∫•t th∆∞·ªùng", r"anomaly", r"suspicious", r"ƒë√°ng ng·ªù"
            ],
            "time_analysis": [
                r"th·ªùi gian", r"khi n√†o", r"time", r"ng√†y", r"th√°ng"
            ],
            "frequent_destinations": [
                r"g·ª≠i ti·ªÅn cho ai", r"destination", r"ng∆∞·ªùi nh·∫≠n"
            ]
        }
    
    def process_message(
        self, 
        request: ChatbotRequest,
        transactions: List[TransactionRecord],
        features: FeatureEngineering,
        anomalies: List[AnomalyDetection]
    ) -> ChatbotResponse:
        """X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu"""
        
        message = request.message.lower()
        intent = self._detect_intent(message)
        
        response_data = {}
        
        if intent == "balance_inquiry":
            response, data = self._handle_balance_inquiry(message, features)
        elif intent == "transaction_count":
            response, data = self._handle_transaction_count(message, features, transactions)
        elif intent == "spending_analysis":
            response, data = self._handle_spending_analysis(message, transactions, features)
        elif intent == "anomaly_check":
            response, data = self._handle_anomaly_check(message, anomalies)
        elif intent == "time_analysis":
            response, data = self._handle_time_analysis(message, transactions, features)
        elif intent == "frequent_destinations":
            response, data = self._handle_destinations(message, features)
        else:
            response, data = self._handle_general_query(message, transactions, features, anomalies)
        
        suggestions = self._generate_suggestions(intent, transactions, features)
        
        return ChatbotResponse(
            response=response,
            suggestions=suggestions,
            data=data
        )
    
    def _detect_intent(self, message: str) -> str:
        """Ph√°t hi·ªán intent t·ª´ message"""
        for intent, patterns in self.intents.items():
            for pattern in patterns:
                if re.search(pattern, message, re.IGNORECASE):
                    return intent
        return "general"
    
    def _handle_balance_inquiry(self, message: str, features: FeatureEngineering) -> tuple:
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·ªë d∆∞"""
        if not features.avg_balance:
            return "T√¥i kh√¥ng c√≥ th√¥ng tin v·ªÅ s·ªë d∆∞ hi·ªán t·∫°i.", {}
        
        balance_info = []
        for asset, balance in features.avg_balance.items():
            balance_info.append(f"- {asset}: {balance:.2f}")
        
        response = f"S·ªë d∆∞ trung b√¨nh c·ªßa b·∫°n:\n" + "\n".join(balance_info)
        
        # Th√™m th√¥ng tin v·ªÅ bi·∫øn ƒë·ªông
        if features.balance_volatility:
            volatile_assets = [
                asset for asset, vol in features.balance_volatility.items() 
                if vol > 100  # Threshold for high volatility
            ]
            if volatile_assets:
                response += f"\n\nT√†i s·∫£n c√≥ bi·∫øn ƒë·ªông cao: {', '.join(volatile_assets)}"
        
        return response, {"balance_details": features.avg_balance}
    
    def _handle_transaction_count(
        self, 
        message: str, 
        features: FeatureEngineering, 
        transactions: List[TransactionRecord]
    ) -> tuple:
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng giao d·ªãch"""
        
        # Extract time period from message
        period = self._extract_time_period(message)
        
        if period == "month":
            count = features.transactions_per_month
            response = f"B·∫°n c√≥ trung b√¨nh {count:.1f} giao d·ªãch m·ªói th√°ng."
        else:
            count = features.total_transactions
            period_days = (features.period_end - features.period_start).days
            response = f"B·∫°n c√≥ {count} giao d·ªãch trong {period_days} ng√†y qua."
        
        # Th√™m breakdown theo lo·∫°i
        breakdown = {
            "payment": features.payment_count,
            "swap": features.swap_count,
            "other": features.total_transactions - features.payment_count - features.swap_count
        }
        
        response += f"\n\nPh√¢n lo·∫°i:\n"
        response += f"- Payment: {breakdown['payment']}\n"
        response += f"- Swap: {breakdown['swap']}\n"
        response += f"- Kh√°c: {breakdown['other']}"
        
        return response, {"transaction_breakdown": breakdown}
    
    def _handle_spending_analysis(
        self, 
        message: str, 
        transactions: List[TransactionRecord],
        features: FeatureEngineering
    ) -> tuple:
        """Ph√¢n t√≠ch chi ti√™u"""
        
        # T√≠nh t·ªïng chi ti√™u (outgoing transactions)
        outgoing_txs = [
            tx for tx in transactions 
            if tx.source == features.account and tx.amount
        ]
        
        if not outgoing_txs:
            return "Kh√¥ng c√≥ giao d·ªãch chi ti√™u n√†o trong kho·∫£ng th·ªùi gian n√†y.", {}
        
        # Group by asset
        spending_by_asset = {}
        for tx in outgoing_txs:
            asset_key = str(tx.asset) if tx.asset else "XLM"
            spending_by_asset[asset_key] = spending_by_asset.get(asset_key, 0) + tx.amount
        
        total_spending = sum(spending_by_asset.values())
        
        response = f"T·ªïng chi ti√™u: {total_spending:.2f}\n\nChi ti·∫øt theo t√†i s·∫£n:\n"
        for asset, amount in sorted(spending_by_asset.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total_spending) * 100
            response += f"- {asset}: {amount:.2f} ({percentage:.1f}%)\n"
        
        # Th√™m insight v·ªÅ patterns
        if features.frequent_destinations:
            response += f"\nB·∫°n th∆∞·ªùng g·ª≠i ti·ªÅn cho: {', '.join(features.frequent_destinations[:3])}"
        
        return response, {"spending_by_asset": spending_by_asset}
    
    def _handle_anomaly_check(self, message: str, anomalies: List[AnomalyDetection]) -> tuple:
        """Ki·ªÉm tra v√† b√°o c√°o anomalies"""
        
        if not anomalies:
            return "Kh√¥ng ph√°t hi·ªán ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng n√†o. T√†i kho·∫£n c·ªßa b·∫°n c√≥ v·∫ª an to√†n! ‚úÖ", {}
        
        # Group anomalies by type
        anomaly_groups = {}
        for anomaly in anomalies:
            anomaly_type = anomaly.anomaly_type
            if anomaly_type not in anomaly_groups:
                anomaly_groups[anomaly_type] = []
            anomaly_groups[anomaly_type].append(anomaly)
        
        response = f"‚ö†Ô∏è Ph√°t hi·ªán {len(anomalies)} ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng:\n\n"
        
        for anomaly_type, group_anomalies in anomaly_groups.items():
            type_name = self._translate_anomaly_type(anomaly_type)
            response += f"{type_name}: {len(group_anomalies)} tr∆∞·ªùng h·ª£p\n"
            
            # Show top 2 most confident
            top_anomalies = sorted(group_anomalies, key=lambda x: x.confidence_score, reverse=True)[:2]
            for anomaly in top_anomalies:
                response += f"  ‚Ä¢ {anomaly.description}\n"
        
        response += f"\nüí° Khuy·∫øn ngh·ªã: Xem x√©t k·ªπ c√°c giao d·ªãch ƒë∆∞·ª£c ƒë√°nh d·∫•u v√† ƒë·∫£m b·∫£o ch√∫ng do b·∫°n th·ª±c hi·ªán."
        
        return response, {"anomaly_summary": anomaly_groups}
    
    def _handle_time_analysis(
        self, 
        message: str, 
        transactions: List[TransactionRecord],
        features: FeatureEngineering
    ) -> tuple:
        """Ph√¢n t√≠ch theo th·ªùi gian"""
        
        response = "üìä Ph√¢n t√≠ch ho·∫°t ƒë·ªông theo th·ªùi gian:\n\n"
        
        # Peak hours
        if features.peak_transaction_hours:
            hours_str = [f"{h:02d}:00" for h in features.peak_transaction_hours]
            response += f"Gi·ªù giao d·ªãch nhi·ªÅu nh·∫•t: {', '.join(hours_str)}\n"
        
        # Recent activity
        recent_txs = [
            tx for tx in transactions 
            if tx.timestamp >= datetime.now() - timedelta(days=7)
        ]
        
        response += f"Giao d·ªãch 7 ng√†y qua: {len(recent_txs)}\n"
        
        # Daily pattern
        if len(transactions) >= 14:  # At least 2 weeks of data
            weekday_txs = [tx for tx in transactions if tx.timestamp.weekday() < 5]
            weekend_txs = [tx for tx in transactions if tx.timestamp.weekday() >= 5]
            
            weekday_avg = len(weekday_txs) / 5 if weekday_txs else 0
            weekend_avg = len(weekend_txs) / 2 if weekend_txs else 0
            
            response += f"Trung b√¨nh ng√†y th∆∞·ªùng: {weekday_avg:.1f} giao d·ªãch/ng√†y\n"
            response += f"Trung b√¨nh cu·ªëi tu·∫ßn: {weekend_avg:.1f} giao d·ªãch/ng√†y\n"
        
        return response, {
            "peak_hours": features.peak_transaction_hours,
            "recent_activity": len(recent_txs)
        }
    
    def _handle_destinations(self, message: str, features: FeatureEngineering) -> tuple:
        """Ph√¢n t√≠ch v·ªÅ destinations"""
        
        if not features.frequent_destinations:
            return "B·∫°n ch∆∞a c√≥ giao d·ªãch g·ª≠i ti·ªÅn th∆∞·ªùng xuy√™n n√†o.", {}
        
        response = "üéØ ƒê·ªãa ch·ªâ b·∫°n th∆∞·ªùng g·ª≠i ti·ªÅn:\n\n"
        
        for i, dest in enumerate(features.frequent_destinations[:5], 1):
            # Mask address for privacy
            masked_dest = dest[:8] + "..." + dest[-8:] if len(dest) > 16 else dest
            response += f"{i}. {masked_dest}\n"
        
        return response, {"frequent_destinations": features.frequent_destinations}
    
    def _handle_general_query(
        self, 
        message: str, 
        transactions: List[TransactionRecord],
        features: FeatureEngineering,
        anomalies: List[AnomalyDetection]
    ) -> tuple:
        """X·ª≠ l√Ω c√¢u h·ªèi chung"""
        
        # Generate general summary
        response = f"üìà T√≥m t·∫Øt ho·∫°t ƒë·ªông t√†i kho·∫£n:\n\n"
        response += f"‚Ä¢ T·ªïng giao d·ªãch: {features.total_transactions}\n"
        response += f"‚Ä¢ Trung b√¨nh/th√°ng: {features.transactions_per_month:.1f}\n"
        
        if anomalies:
            response += f"‚Ä¢ C·∫£nh b√°o: {len(anomalies)} ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng\n"
        else:
            response += f"‚Ä¢ Tr·∫°ng th√°i: An to√†n ‚úÖ\n"
        
        if features.debt_to_asset_ratio:
            response += f"‚Ä¢ T·ª∑ l·ªá chi/thu: {features.debt_to_asset_ratio:.2f}\n"
        
        response += f"\nüí° H·ªèi t√¥i v·ªÅ: s·ªë d∆∞, giao d·ªãch, chi ti√™u, ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng..."
        
        return response, {
            "summary": {
                "total_transactions": features.total_transactions,
                "monthly_avg": features.transactions_per_month,
                "anomaly_count": len(anomalies)
            }
        }
    
    def _extract_time_period(self, message: str) -> str:
        """Extract time period from message"""
        if re.search(r"th√°ng|month", message, re.IGNORECASE):
            return "month"
        elif re.search(r"tu·∫ßn|week", message, re.IGNORECASE):
            return "week"
        elif re.search(r"ng√†y|day", message, re.IGNORECASE):
            return "day"
        return "total"
    
    def _translate_anomaly_type(self, anomaly_type: str) -> str:
        """Translate anomaly type to Vietnamese"""
        translations = {
            "unusual_amount": "S·ªë ti·ªÅn b·∫•t th∆∞·ªùng",
            "high_frequency": "T·∫ßn su·∫•t cao",
            "unusual_time": "Th·ªùi gian b·∫•t th∆∞·ªùng",
            "rapid_transactions": "Giao d·ªãch li√™n ti·∫øp",
            "ml_detected": "Ph√°t hi·ªán b·ªüi AI",
            "round_number_bias": "Pattern s·ªë tr√≤n",
            "weekend_activity": "Ho·∫°t ƒë·ªông cu·ªëi tu·∫ßn"
        }
        return translations.get(anomaly_type, anomaly_type)
    
    def _generate_suggestions(
        self, 
        intent: str, 
        transactions: List[TransactionRecord],
        features: FeatureEngineering
    ) -> List[str]:
        """Generate contextual suggestions"""
        
        suggestions = []
        
        # Base suggestions
        base_suggestions = [
            "S·ªë d∆∞ hi·ªán t·∫°i c·ªßa t√¥i",
            "C√≥ ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng n√†o kh√¥ng?",
            "T√¥i ƒë√£ chi ti√™u bao nhi√™u th√°ng n√†y?",
            "Ph√¢n t√≠ch giao d·ªãch c·ªßa t√¥i"
        ]
        
        # Context-specific suggestions
        if intent == "balance_inquiry":
            suggestions.extend([
                "Bi·∫øn ƒë·ªông s·ªë d∆∞ nh∆∞ th·∫ø n√†o?",
                "So s√°nh v·ªõi th√°ng tr∆∞·ªõc"
            ])
        elif intent == "anomaly_check":
            suggestions.extend([
                "L√†m sao ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n?",
                "C√°ch thi·∫øt l·∫≠p c·∫£nh b√°o"
            ])
        elif len(transactions) > 50:
            suggestions.extend([
                "Xu h∆∞·ªõng giao d·ªãch c·ªßa t√¥i",
                "ƒê·ªãa ch·ªâ t√¥i g·ª≠i ti·ªÅn nhi·ªÅu nh·∫•t"
            ])
        
        # Combine and limit
        all_suggestions = base_suggestions + suggestions
        return all_suggestions[:5]  # Limit to 5 suggestions

# Singleton instance
chatbot_service = ChatbotService()
