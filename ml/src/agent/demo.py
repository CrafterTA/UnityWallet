"""
Complete Financial Copilot Demo
Demo t√≠ch h·ª£p ML + LLM cho Unity Wallet
"""

import pandas as pd
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any

class FinancialCopilotDemo:
    """
    Demo Financial Copilot t√≠ch h·ª£p ML v·ªõi LLM
    Minh h·ªça 3 use cases ch√≠nh
    """
    
    def __init__(self):
        self.demo_data = self._create_demo_data()
        
    def _create_demo_data(self) -> pd.DataFrame:
        """T·∫°o d·ªØ li·ªáu demo realistic"""
        
        transactions = [
            # Travel expenses
            {"user_id": "user123", "amount": 2500000, "description": "v√© m√°y bay ƒëi ƒê√† N·∫µng", 
             "merchant": "VietJet", "category": "Travel", "date": "2024-08-15", "mcc": "3000"},
            {"user_id": "user123", "amount": 1200000, "description": "kh√°ch s·∫°n 2 ƒë√™m", 
             "merchant": "Vinpearl Hotel", "category": "Travel", "date": "2024-08-16", "mcc": "7011"},
            
            # Food & Dining
            {"user_id": "user123", "amount": 150000, "description": "ƒÉn ph·ªü b√≤", 
             "merchant": "Ph·ªü H·ªìng", "category": "F&B", "date": "2024-08-17", "mcc": "5812"},
            {"user_id": "user123", "amount": 85000, "description": "cafe s√°ng", 
             "merchant": "Highlands Coffee", "category": "F&B", "date": "2024-08-17", "mcc": "5814"},
            {"user_id": "user123", "amount": 320000, "description": "nh√† h√†ng t·ªëi", 
             "merchant": "BBQ Garden", "category": "F&B", "date": "2024-08-17", "mcc": "5812"},
            
            # Shopping
            {"user_id": "user123", "amount": 450000, "description": "mua √°o", 
             "merchant": "Zara", "category": "Shopping", "date": "2024-08-18", "mcc": "5651"},
            {"user_id": "user123", "amount": 890000, "description": "gi√†y th·ªÉ thao", 
             "merchant": "Nike Store", "category": "Shopping", "date": "2024-08-18", "mcc": "5661"},
            
            # Transportation
            {"user_id": "user123", "amount": 45000, "description": "grab v·ªÅ nh√†", 
             "merchant": "Grab", "category": "Transportation", "date": "2024-08-18", "mcc": "4121"},
            {"user_id": "user123", "amount": 25000, "description": "xe bus", 
             "merchant": "SAMCO", "category": "Transportation", "date": "2024-08-18", "mcc": "4111"},
            
            # Suspicious transaction
            {"user_id": "user123", "amount": 15000000, "description": "unknown transaction", 
             "merchant": "ATM Unknown", "category": "Unknown", "date": "2024-08-18", "mcc": "6011"},
        ]
        
        return pd.DataFrame(transactions)
    
    def demo_chat_scenarios(self):
        """Demo c√°c scenarios chat ch√≠nh"""
        
        print("ü§ñ FINANCIAL COPILOT DEMO")
        print("=" * 50)
        
        scenarios = [
            {
                "question": "T√≥m t·∫Øt chi ti√™u th√°ng n√†y c·ªßa t√¥i",
                "intent": "spending_summary"
            },
            {
                "question": "C√≥ giao d·ªãch b·∫•t th∆∞·ªùng n√†o kh√¥ng?",
                "intent": "fraud_check"
            },
            {
                "question": "G·ª£i √Ω ti·∫øt ki·ªám 15% khi ƒëi du l·ªãch",
                "intent": "savings_advice"
            },
            {
                "question": "Ph√¢n t√≠ch danh m·ª•c chi ti√™u c·ªßa t√¥i",
                "intent": "category_analysis"
            }
        ]
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\\nüìù Scenario {i}: {scenario['question']}")
            print("-" * 40)
            
            response = self._process_chat_request(
                scenario["question"], 
                scenario["intent"],
                "user123"
            )
            
            print(f"ü§ñ AI Response:")
            print(f"   {response['ai_response']}")
            
            if response['actions']:
                print(f"\\nüéØ Suggested Actions:")
                for action in response['actions']:
                    print(f"   ‚Ä¢ {action['title']}: {action['description']}")
            
            if response['insights']:
                print(f"\\nüìä ML Insights:")
                for key, value in response['insights'].items():
                    if isinstance(value, (int, float)):
                        print(f"   ‚Ä¢ {key}: {value:,}")
                    else:
                        print(f"   ‚Ä¢ {key}: {value}")
    
    def _process_chat_request(self, question: str, intent: str, user_id: str) -> Dict:
        """X·ª≠ l√Ω chat request v√† t·∫°o response"""
        
        # Get ML insights
        insights = self._get_ml_insights(intent, user_id)
        
        # Generate AI response (simulated LLM)
        ai_response = self._generate_ai_response(question, intent, insights)
        
        # Get suggested actions
        actions = self._get_suggested_actions(intent, insights)
        
        return {
            "ai_response": ai_response,
            "insights": insights,
            "actions": actions,
            "intent": intent
        }
    
    def _get_ml_insights(self, intent: str, user_id: str) -> Dict:
        """M√¥ ph·ªèng ML analysis"""
        
        user_data = self.demo_data[self.demo_data['user_id'] == user_id]
        
        insights = {}
        
        if intent in ["spending_summary", "category_analysis"]:
            # Spending analysis
            insights["total_amount"] = user_data['amount'].sum()
            insights["transaction_count"] = len(user_data)
            insights["avg_transaction"] = user_data['amount'].mean()
            
            # Category breakdown
            category_spending = user_data.groupby('category')['amount'].sum().to_dict()
            insights["categories"] = category_spending
            
            # Top merchants
            merchant_spending = user_data.groupby('merchant')['amount'].sum().head(3).to_dict()
            insights["top_merchants"] = merchant_spending
        
        elif intent == "fraud_check":
            # Anomaly detection simulation
            suspicious_txns = user_data[user_data['amount'] > 10000000]
            
            insights["fraud_detected"] = len(suspicious_txns) > 0
            insights["suspicious_transactions"] = len(suspicious_txns)
            
            if len(suspicious_txns) > 0:
                insights["suspicious_amount"] = suspicious_txns['amount'].iloc[0]
                insights["risk_level"] = "HIGH"
                insights["confidence"] = 0.92
        
        elif intent == "savings_advice":
            # Savings opportunities
            category_spending = user_data.groupby('category')['amount'].sum().to_dict()
            
            savings_potential = {}
            for category, amount in category_spending.items():
                if category == "Travel":
                    savings_potential[category] = amount * 0.15  # 15% savings
                elif category == "F&B":
                    savings_potential[category] = amount * 0.20  # 20% savings
                elif category == "Shopping":
                    savings_potential[category] = amount * 0.25  # 25% savings
            
            insights["savings_potential"] = savings_potential
            insights["total_savings"] = sum(savings_potential.values())
        
        return insights
    
    def _generate_ai_response(self, question: str, intent: str, insights: Dict) -> str:
        """M√¥ ph·ªèng LLM response"""
        
        if intent == "spending_summary":
            total = insights.get("total_amount", 0)
            count = insights.get("transaction_count", 0)
            categories = insights.get("categories", {})
            
            top_category = max(categories.items(), key=lambda x: x[1]) if categories else ("N/A", 0)
            
            return f"""Th√°ng n√†y b·∫°n ƒë√£ chi ti√™u t·ªïng c·ªông {total:,} VND qua {count} giao d·ªãch.
            
Danh m·ª•c chi ti√™u nhi·ªÅu nh·∫•t l√† {top_category[0]} v·ªõi {top_category[1]:,} VND.

Chi ti·∫øt theo danh m·ª•c:
{chr(10).join([f"‚Ä¢ {cat}: {amount:,} VND" for cat, amount in categories.items()])}

Nh√¨n chung m·ª©c chi ti√™u c·ªßa b·∫°n ·ªü m·ª©c h·ª£p l√Ω, v·ªõi xu h∆∞·ªõng t·∫≠p trung v√†o du l·ªãch v√† ƒÉn u·ªëng."""
        
        elif intent == "fraud_check":
            if insights.get("fraud_detected", False):
                suspicious_amount = insights.get("suspicious_amount", 0)
                confidence = insights.get("confidence", 0)
                
                return f"""‚ö†Ô∏è C·∫¢NH B√ÅO: Ph√°t hi·ªán giao d·ªãch b·∫•t th∆∞·ªùng!

Giao d·ªãch ƒë√°ng ng·ªù: {suspicious_amount:,} VND
ƒê·ªô tin c·∫≠y: {confidence*100:.1f}%

ƒê√¢y l√† giao d·ªãch c√≥ gi√° tr·ªã cao b·∫•t th∆∞·ªùng so v·ªõi th√≥i quen chi ti√™u c·ªßa b·∫°n. 
Vui l√≤ng ki·ªÉm tra v√† x√°c th·ª±c giao d·ªãch n√†y.

N·∫øu kh√¥ng ph·∫£i giao d·ªãch c·ªßa b·∫°n, h√£y kh√≥a th·∫ª ngay l·∫≠p t·ª©c!"""
            else:
                return "‚úÖ T·∫•t c·∫£ giao d·ªãch c·ªßa b·∫°n ƒë·ªÅu b√¨nh th∆∞·ªùng. Kh√¥ng ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù n√†o."
        
        elif intent == "savings_advice":
            total_savings = insights.get("total_savings", 0)
            savings_potential = insights.get("savings_potential", {})
            
            tips = []
            if "Travel" in savings_potential:
                tips.append("‚úàÔ∏è Du l·ªãch: ƒê·∫∑t v√© s·ªõm, s·ª≠ d·ª•ng loyalty points, ch·ªçn ng√†y bay linh ho·∫°t")
            if "F&B" in savings_potential:
                tips.append("üçú ƒÇn u·ªëng: N·∫•u ƒÉn t·∫°i nh√† th∆∞·ªùng xuy√™n h∆°n, s·ª≠ d·ª•ng voucher gi·∫£m gi√°")
            if "Shopping" in savings_potential:
                tips.append("üõçÔ∏è Mua s·∫Øm: L·∫≠p danh s√°ch tr∆∞·ªõc khi mua, ch·ªù sale l·ªõn")
            
            return f"""üí∞ B·∫°n c√≥ th·ªÉ ti·∫øt ki·ªám {total_savings:,} VND (15%) m·ªói th√°ng!

C∆° h·ªôi ti·∫øt ki·ªám theo danh m·ª•c:
{chr(10).join([f"‚Ä¢ {cat}: {amount:,} VND" for cat, amount in savings_potential.items()])}

G·ª£i √Ω c·ª• th·ªÉ:
{chr(10).join(tips)}

V·ªõi nh·ªØng thay ƒë·ªïi nh·ªè n√†y, b·∫°n s·∫Ω ti·∫øt ki·ªám ƒë∆∞·ª£c m·ªôt kho·∫£n ƒë√°ng k·ªÉ!"""
        
        elif intent == "category_analysis":
            categories = insights.get("categories", {})
            total = sum(categories.values())
            
            analysis = []
            for cat, amount in sorted(categories.items(), key=lambda x: x[1], reverse=True):
                percentage = (amount / total * 100) if total > 0 else 0
                analysis.append(f"‚Ä¢ {cat}: {amount:,} VND ({percentage:.1f}%)")
            
            return f"""üìä Ph√¢n t√≠ch chi ti√™u theo danh m·ª•c:

{chr(10).join(analysis)}

Nh·∫≠n x√©t:
- Chi ti√™u ch·ªß y·∫øu t·∫≠p trung v√†o du l·ªãch v√† ƒÉn u·ªëng
- M·ª©c chi ti√™u mua s·∫Øm ·ªü m·ª©c v·ª´a ph·∫£i
- C√≥ th·ªÉ c√¢n nh·∫Øc t·ªëi ∆∞u h√≥a chi ph√≠ du l·ªãch v√† ƒÉn u·ªëng ƒë·ªÉ ti·∫øt ki·ªám"""
        
        return "T√¥i ƒëang ph√¢n t√≠ch d·ªØ li·ªáu c·ªßa b·∫°n. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t."
    
    def _get_suggested_actions(self, intent: str, insights: Dict) -> List[Dict]:
        """T·∫°o suggested actions"""
        
        actions = []
        
        if intent == "fraud_check" and insights.get("fraud_detected", False):
            actions = [
                {
                    "type": "security",
                    "action": "lock_card", 
                    "title": "Kh√≥a th·∫ª ngay",
                    "description": "Kh√≥a th·∫ª t·∫°m th·ªùi ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n"
                },
                {
                    "type": "verification",
                    "action": "verify_transaction",
                    "title": "X√°c th·ª±c giao d·ªãch", 
                    "description": "X√°c nh·∫≠n ƒë√¢y c√≥ ph·∫£i giao d·ªãch c·ªßa b·∫°n"
                },
                {
                    "type": "support",
                    "action": "contact_support",
                    "title": "Li√™n h·ªá h·ªó tr·ª£",
                    "description": "G·ªçi hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£"
                }
            ]
        
        elif intent == "savings_advice":
            actions = [
                {
                    "type": "planning",
                    "action": "create_budget",
                    "title": "T·∫°o ng√¢n s√°ch",
                    "description": "L·∫≠p k·∫ø ho·∫°ch chi ti√™u h√†ng th√°ng"
                },
                {
                    "type": "tracking",
                    "action": "set_alerts",
                    "title": "C√†i c·∫£nh b√°o",
                    "description": "Nh·∫≠n th√¥ng b√°o khi chi ti√™u v∆∞·ª£t ng∆∞·ª°ng"
                }
            ]
        
        elif intent == "spending_summary":
            actions = [
                {
                    "type": "analysis",
                    "action": "detailed_report",
                    "title": "B√°o c√°o chi ti·∫øt",
                    "description": "Xem ph√¢n t√≠ch chi ti√™u ƒë·∫ßy ƒë·ªß"
                },
                {
                    "type": "comparison",
                    "action": "compare_periods",
                    "title": "So s√°nh th√°ng tr∆∞·ªõc",
                    "description": "Xem xu h∆∞·ªõng thay ƒë·ªïi chi ti√™u"
                }
            ]
        
        return actions
    
    def demo_widget_integration(self):
        """Demo widget integration cho dashboard"""
        
        print("\\n\\nüéõÔ∏è DASHBOARD WIDGETS DEMO")
        print("=" * 50)
        
        # Spending chart widget
        print("\\nüìä Spending Chart Widget:")
        categories = self._get_ml_insights("category_analysis", "user123")["categories"]
        
        print("   Bi·ªÉu ƒë·ªì danh m·ª•c chi ti√™u:")
        for cat, amount in categories.items():
            bar_length = int(amount / 1000000)  # Scale for visualization
            bar = "‚ñà" * bar_length
            print(f"   {cat:12} ‚îÇ{bar} {amount:,} VND")
        
        # Fraud alert widget
        print("\\nüö® Fraud Alert Widget:")
        fraud_insights = self._get_ml_insights("fraud_check", "user123")
        
        if fraud_insights.get("fraud_detected", False):
            print("   ‚ö†Ô∏è  C·∫¢NH B√ÅO GIAN L·∫¨N")
            print(f"   Ph√°t hi·ªán {fraud_insights['suspicious_transactions']} giao d·ªãch ƒë√°ng ng·ªù")
            print("   [Kh√≥a th·∫ª] [X√°c th·ª±c] [Li√™n h·ªá]")
        else:
            print("   ‚úÖ T√†i kho·∫£n an to√†n")
        
        # Quick insights widget
        print("\\nüí° Quick Insights Widget:")
        summary = self._get_ml_insights("spending_summary", "user123")
        
        print(f"   ‚Ä¢ T·ªïng chi ti√™u: {summary['total_amount']:,} VND")
        print(f"   ‚Ä¢ S·ªë giao d·ªãch: {summary['transaction_count']}")
        print(f"   ‚Ä¢ Trung b√¨nh/giao d·ªãch: {summary['avg_transaction']:,.0f} VND")
        
        # Savings opportunity widget
        savings = self._get_ml_insights("savings_advice", "user123")
        print(f"   ‚Ä¢ Ti·ªÅm nƒÉng ti·∫øt ki·ªám: {savings['total_savings']:,.0f} VND/th√°ng")

def main():
    """Main demo function"""
    
    demo = FinancialCopilotDemo()
    
    # Run chat scenarios demo
    demo.demo_chat_scenarios()
    
    # Run widget integration demo  
    demo.demo_widget_integration()
    
    print("\\n\\nüéâ Demo ho√†n th√†nh!")
    print("\\nT√≠ch h·ª£p ML + LLM cho Financial Copilot bao g·ªìm:")
    print("‚úÖ Chat interface v·ªõi AI")
    print("‚úÖ Ph√¢n lo·∫°i chi ti√™u th√¥ng minh") 
    print("‚úÖ Ph√°t hi·ªán gian l·∫≠n real-time")
    print("‚úÖ G·ª£i √Ω ti·∫øt ki·ªám c√° nh√¢n h√≥a")
    print("‚úÖ Dashboard widgets t∆∞∆°ng t√°c")
    print("‚úÖ Action buttons 1-tap")

if __name__ == "__main__":
    main()
